#include <cstdio>
#include <cstring>
#include <algorithm>
const int L = 2e5 + 10;
int n, sa[L], rk[L], hei[L], ws[L], wa[L], wb[L];
char s[L];
bool eq(int* x, int i, int j, int l) {
	return x[i] == x[j] && x[i + l] == x[j + l];
}
void mksa(int n, int m) {
	int* x = wa, *y = wb, i, j, p;
	for (i = 0; i < m; i++) ws[i] = 0;
	for (i = 0; i < n; i++) ws[x[i] = s[i]]++;
	for (i = 1; i < m; i++) ws[i] += ws[i - 1];
	for (i = n - 1; i >= 0; i--) sa[--ws[s[i]]] = i;
	for (j = 1, p = 1; p <= n;j <<= 1, m = p) {
//		printf("j:%d p:%d\n", j, p);
		for (p = 0, i = n - j; i < n; i++) y[p++] = i;
		for (i = 0; i < n; i++) if (sa[i] >= j) y[p++] = sa[i] - j;
		for (i = 0; i < m; i++) ws[i] = 0;
		for (i = 0; i < n; i++) ws[x[y[i]]]++;
		for (i = 1; i < m; i++) ws[i] += ws[i - 1];
		for (i = n - 1; i >= 0; i--) sa[--ws[x[y[i]]]] = y[i];
		std::swap(x, y);
		for (p = 2, x[sa[0]] = 1, i = 1; i < n; i++)
			x[sa[i]] = eq(y, sa[i - 1], sa[i], j) ? p - 1: p++;
	}
	for (int i = 0; i < n; i++) rk[sa[i]] = i;
	for (int i = 0, k = 0; i < n; hei[rk[i++]] = k) if (rk[i] - 1 >= 0)
		for (k ? k-- : 0, j = sa[rk[i] - 1]; s[i + k] == s[j + k]; k++);
}
int main() {
	scanf("%s", s);
	n = strlen(s);
	mksa(n, 256);
//	puts("da");
	for (int i = 0; i < n; i++) printf("%d ", sa[i] + 1);
	putchar('\n');
	for (int i = 1; i < n; i++) printf("%d ", hei[i]);
}
